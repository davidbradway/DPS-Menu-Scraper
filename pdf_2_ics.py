# -*- coding: utf-8 -*-
"""PDF 2 ICS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cukJWYEEJ3yPdAmzARueGBWSWNN58R2c
"""

# This process is now automated for Elementary school Lunch in English and Spanish.
# Just do Runtime > Run all (Ctrl+F9)
# Then download the file and import it into Google Calendar, etc. Open the file menu on the left with the folder icon

# If the fragile formatting code breaks, I may need to update things.
# Also perhaps for a new calendar month format or for a menu type

# prompt: use pydpf to read text from a pdf at a given url, parse the entries and create an ics-formatted text string for a calendar program import
import re
from datetime import datetime, timezone
from io import BytesIO
from urllib.parse import urljoin
from urllib.request import urlopen

import emoji
import ics
import requests
from bs4 import BeautifulSoup
from nltk.stem import WordNetLemmatizer
from pypdf import PdfReader


def get_all_pdfs(url):
    # Send an HTTP GET request to the URL
    response = requests.get(url)
    # Check if the request was successful
    response.raise_for_status()
    # Parse the HTML content
    soup = BeautifulSoup(response.text, "html.parser")
    # Find all anchor tags and extract the href attribute
    links = [a.get("href") for a in soup.find_all("a", href=True)]
    pdf_files = list(
        set([urljoin(url, file) for file in links if file.endswith(".pdf")])
    )
    return pdf_files


def url_to_text(pdf_url):
    remote_file = urlopen(pdf_url).read()
    memory_file = BytesIO(remote_file)
    reader = PdfReader(memory_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text() + "\n"
    return text


def is_valid_date(date_string, language):
    """
    Checks if the input string is a valid date in the format "Month Day"
    where the month is a word (e.g., January, February) and the day is a number.
    """
    return parse_date_string(date_string, language) is not None


def parse_date_string(date_string, language):
    """Parses a date string into year, month, day."""
    if language == "es":
        pattern = r"^(Enero|Febrero|Marzo|Abril|Mayo|Junio|Julio|Agosto|Septiembre|Octubre|Noviembre|Diciembre)\s+(\d{1,2})$"
    else:
        pattern = r"^(January|February|March|April|May|June|July|August|September|October|November|December)\s+(\d{1,2})$"
    match = re.match(pattern, date_string)
    if not match:
        return None
    month_name = match.group(1)
    day = int(match.group(2))

    year = datetime.now().year
    if language == "es":
        # list of month names
        month_names = [
            "Enero",
            "Febrero",
            "Marzo",
            "Abril",
            "Mayo",
            "Junio",
            "Julio",
            "Agosto",
            "Septiembre",
            "Octubre",
            "Noviembre",
            "Diciembre",
        ]
        month = month_names.index(month_name) + 1
    elif language == "en":
        month_names = [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
        ]
        month = month_names.index(month_name) + 1
    else:
        return None
    return year, month, day


def add_emojis(next_line, language, wnl):
    next_line_no_colons: str = re.sub(r":", r"", next_line)
    next_line_no_colons_low = next_line_no_colons.lower()
    lemmatized_string = " ".join(
        [wnl.lemmatize(words) for words in next_line_no_colons_low.split()]
    )
    with_colons: str = re.sub(r"(\w*)", r":\1:", lemmatized_string)
    if language == "es":
        with_emojis: str = emoji.emojize(string=with_colons, language=language)
    elif language == "en":
        with_emojis: str = emoji.emojize(string=with_colons, language="alias")
    else:
        return None
    only_emoji: str = "".join([c for c in with_emojis if c in emoji.EMOJI_DATA])
    return next_line_no_colons + only_emoji


def text_to_ics(text, event_title, language):
    # Create WordNetLemmatizer object
    wnl = WordNetLemmatizer()

    calendar = ics.Calendar()
    lines = text.split("\n")
    # print(lines)
    i = 0
    while i < len(lines):
        line = lines[i]
        if not is_valid_date(line.strip(), language):
            i += 1
            continue
        date_parts = parse_date_string(line.strip(), language)
        year, month, day = date_parts
        event = ics.Event()
        event.name = event_title
        event.begin = datetime(year, month, day, tzinfo=timezone.utc)  # set begin time
        event.make_all_day()
        extra_content = ics.utils.ContentLine(name="TRANSP", value="TRANSPARENT")
        event.extra.append(extra_content)
        # build description until you reach next date
        event.description = ""
        while (
            i + 1 < len(lines)
            and not is_valid_date(lines[i + 1].strip(), language)
            and "Prices" not in lines[i + 1]
            and "Precios" not in lines[i + 1]
        ):
            next_line = lines[i + 1].strip()
            line = add_emojis(next_line, language, wnl)
            # print(line)
            event.description += line + "\n"
            i += 1
        calendar.events.add(event)
    return calendar


def to_file(ics_string, filename):
    # Save to file:
    if ics_string:
        with open(filename, "w", newline="", encoding="utf-8") as f:
            f.write(ics_string)


def generate_ics(pdf_files, level, language):
    level_terms_en = {
        "elementary": "Elementary",
        "middle": "Middle",
        "high": "High",
    }
    level_terms_es = {
        "elementary": "Elemental",
        "middle": "Intermedia",
        "high": "Secundaria",
    }
    level_codes = {"elementary": "ES", "middle": "MS", "high": "HS"}
    if "en" in language:
        url = [
            file
            for file in pdf_files
            if level_codes[level] in file and "Lunch" in file and "Spanish" not in file
        ]
        event_title = f"DPS - {level_terms_en[level]} School Lunch Menu"  # All events in the calendar will have this title
        outfile = f"english_{level}.ics"
    elif "es" in language:
        url = [
            file
            for file in pdf_files
            if level_codes[level] in file and "Lunch" in file and "Spanish" in file
        ]
        event_title = f"DPS - MenÃº Almuerzo Escuela {level_terms_es[level]}"  # All events in the calendar will have this title
        outfile = f"spanish_{level}.ics"
    else:
        return False
    link = url[0].replace(" ", "%20")
    # print(link)
    text = url_to_text(link)
    # print(text)
    cal = text_to_ics(text, event_title, language)
    ics_string = cal.serialize()
    # print(ics_string)
    to_file(ics_string, outfile)
    return True


# Now we find the menu from the site
url = "https://www.dpsnc.net/Page/7089"
pdf_files = get_all_pdfs(url)
# print(pdf_files)

generate_ics(pdf_files, level="elementary", language="en")
generate_ics(pdf_files, level="elementary", language="es")
generate_ics(pdf_files, level="middle", language="en")
generate_ics(pdf_files, level="middle", language="es")
generate_ics(pdf_files, level="high", language="en")
generate_ics(pdf_files, level="high", language="es")
